covariate.labels=c("Tertile II", "Tertile III"), ci=T,
omit.stat=c("rsq", "ll", "wald", "max.rsq", "logrank", "lr"), dep.var.labels=NULL,
dep.var.caption=c("Hazard Ratio - 95% CI"), column.labels=c("Normal", "Prediabetes", "Diabetes"))
cph_cancerNormal2
cph_cancerPre2
cph_cancerDiabete2
stargazer(cph_allCauseNormal, cph_allCausePre, cph_allCauseDiabete,
apply.coef=exp, no.space=T,
omit=c('AGE', 'SEX', 'RACE', 'BMI', 'SMOKE', 'HGBA1C', 'ACTIVITY'),
covariate.labels=c("Tertile II", "Tertile III"), ci=T,
omit.stat=c("rsq", "ll", "wald", "max.rsq", "logrank", "lr"), dep.var.labels=NULL,
dep.var.caption=c("Hazard Ratio - 95% CI"), column.labels=c("Normal", "Prediabetes", "Diabetes"))
stargazer(cph_CVDNormal, cph_CVDPre, cph_CVDDiabete,
apply.coef=exp, no.space=T,
omit=c('AGE', 'SEX', 'RACE', 'BMI', 'SMOKE', 'HGBA1C', 'ACTIVITY'),
covariate.labels=c("Tertile II", "Tertile III"), ci=T,
omit.stat=c("rsq", "ll", "wald", "max.rsq", "logrank", "lr"), dep.var.labels=NULL,
dep.var.caption=c("Hazard Ratio - 95% CI"), column.labels=c("Normal", "Prediabetes", "Diabetes"))
stargazer(cph_cancerNormal, cph_cancerPre, cph_cancerDiabete,
apply.coef=exp, no.space=T,
omit=c('AGE', 'SEX', 'RACE', 'BMI', 'SMOKE', 'HGBA1C', 'ACTIVITY'),
covariate.labels=c("Tertile II", "Tertile III"), ci=T,
omit.stat=c("rsq", "ll", "wald", "max.rsq", "logrank", "lr"), dep.var.labels=NULL,
dep.var.caption=c("Hazard Ratio - 95% CI"), column.labels=c("Normal", "Prediabetes", "Diabetes"))
cph_allCauseNormal
cph_allCausePre
cph_allCauseDiabete
cph_CVDNormal
cph_CVDPre
cph_CVDDiabete
cph_cancerNormal
cph_cancerPre
cph_cancerDiabete
version
?coxph
View(DII)
DII_params
max(importantData$DII)
min(importantData$DII)
median(importantData$DII)
?.Call
require('Rcpp')
require('inline')
require('rbenchmark')
require('rbenchmark')
install.packages('rbenchmark')
require('rbenchmark')
?require
a = require('Rcpp')
a
if (!require('Rcpp'))
{
install.packages('Rcpp')
}
require('rbenchmark')
install.packages('inline')
require('inline')
?signature
# Using cxxfunction
funSrc <- '
int fibonacci(const int x) {
if (x == 0) return(0);
7 if (x == 1) return(1);
return fibonacci(x - 1) + fibonacci(x - 2);
}'
fibRcpp <- cxxfunction(signature(xs="int"),
plugin="Rcpp",
incl=funSrc,
body='
int x = Rcpp::as<int>(xs);
return Rcpp::wrap( fibonacci(x) );
')
funSrc <- '
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return fibonacci(x - 1) + fibonacci(x - 2);
}'
fibRcpp <- cxxfunction(signature(xs="int"),
plugin="Rcpp",
incl=funSrc,
body='
int x = Rcpp::as<int>(xs);
return Rcpp::wrap( fibonacci(x) );
')
fibRcpp <- cxxfunction(signature(xs="int"),
plugin="Rcpp",
incl=funSrc,
body='int x = Rcpp::as<int>(xs);return Rcpp::wrap( fibonacci(x) );')
?cxxfunction
fibRcpp <- cxxfunction(signature(x="int"),
plugin="Rcpp",
incl=funSrc,
body='int x = Rcpp::as<int>(xs);return Rcpp::wrap( fibonacci(x) );')
install.packages('Rtools')
?RTools
require('Rtools')
w = require('Rtools')
install.packages('Rtools')
install.packages("xtable", type="source")
fibRcpp <- cxxfunction(signature(x="int"),
plugin="Rcpp",
incl=funSrc,
body='int x = Rcpp::as<int>(xs);return Rcpp::wrap( fibonacci(x) );')
#install.packages('Rcpp')
require('Rcpp')
#install.packages('rbenchmark')
require('rbenchmark')
#install.packages('inline')
require('inline')
# Using cxxfunction
funSrc <- '
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return fibonacci(x - 1) + fibonacci(x - 2);
}'
fibRcpp <- cxxfunction(signature(x="int"),
plugin="Rcpp",
incl=funSrc,
body='int x = Rcpp::as<int>(xs);return Rcpp::wrap( fibonacci(x) );')
plot(simpKM, main="Kaplan Meier Plot", xlab="t", ylab="Survival")
require("survival")
# Low dim survival analysis - train1
#   Time = train1[,11]
#   Status = train[,12]
simpKM <- survfit(Surv(time, status) ~ 1, type="kaplan-meier", data = train1)
plot(simpKM, main="Kaplan Meier Plot", xlab="t", ylab="Survival")
setwd("C:\\Users\\Matthew\\Desktop\\DKFZ\\Competing_Risks")
load("simdat1.Rdata")
require("survival")
# Low dim survival analysis - train1
#   Time = train1[,11]
#   Status = train[,12]
simpKM <- survfit(Surv(time, status) ~ 1, type="kaplan-meier", data = train1)
plot(simpKM, main="Kaplan Meier Plot", xlab="t", ylab="Survival")
summary(simpKM)
coxph(Surv(time, status) ~ 1, data = train1)
coxph(Surv(time, status) ~ train1[,1:10], data = train1)
coxph(Surv(time, status) ~ ., data = train1)
View(train1)
require("pec")
install.packages("pec")
require("pec")
summary(simpKM)
?pec
browseVignettes()
set.seed(248)
setwd("C:\\Users\\Matthew\\Desktop\\DKFZ\\Competing_Risks")
load("simdat1.Rdata")
require("survival")
# For reproducability
set.seed(248)
# Low dim survival analysis - train1
#   Time = train1[,11]
#   Status = train[,12]
# Fit Kaplan Meier curve and plot it.
#   + = point where an individual became censored
#   Vertical drops = point where an event occured
#   Dotted lines = confidence intervals
simpKM <- survfit(Surv(time, status) ~ 1, type="kaplan-meier", data = train1)
plot(simpKM, main="Kaplan Meier Plot", xlab="t", ylab="Survival")
summary(simpKM)
# Fit a cox PH model
#   . = all variables not already mentioned in formula
coxph(Surv(time, status) ~ ., data = train1)
?pec
coxPHModel = coxph(Surv(time, status) ~ ., data = train1)
pec(coxPHModel)
pec(coxPHModel, splitMethod = "BootCv", B = 10)
pec(object = coxPHModel, splitMethod = "BootCv", B = 10)
pec(object = coxPHModel,
formula = Surv(time, status) ~ 1, data = train1
splitMethod = "BootCv", B = 10)
# The weights used while calculating the Brier score correspond to probability of not being censored.
# Boostrapping can be automatically applied.
pec(object = coxPHModel,
formula = Surv(time, status) ~ 1, data = train1,
splitMethod = "BootCv", B = 10)
plot(predictionError)
# The weights used while calculating the Brier score correspond to probability of not being censored.
# Boostrapping can be automatically applied.
predictionError = pec(object = coxPHModel,
formula = Surv(time, status) ~ 1, data = train1,
splitMethod = "BootCv", B = 10)
plot(predictionError)
predictionError = pec(object = coxPHModel,
formula = Surv(time, status) ~ ., data = train1,
splitMethod = "BootCv", B = 10)
plot(predictionError)
predictionError = pec(object = coxPHModel,
formula = Surv(time, status) ~ ., data = train1,
splitMethod = "BootCv", B = 10)
# Boostrapping can be automatically applied.
predictionError = pec(object = coxPHModel,
formula = Surv(time, status) ~ X1, data = train1,
splitMethod = "BootCv", B = 10)
plot(predictionError)
predictionError = pec(object = coxPHModel,
formula = Surv(time, status) ~ X1 + X2, data = train1,
splitMethod = "BootCv", B = 10)
plot(predictionError)
plot(simpKM, main="Kaplan Meier Plot", xlab="t", ylab="Survival")
formula = Surv(time, status) ~ 1, data = train1,
predictionError = pec(object = coxPHModel,
formula = Surv(time, status) ~ 1, data = train1,
splitMethod = "BootCv", B = 10)
plot(predictionError)
summary(predictionError)
simpKM <- survfit(Surv(time, status) ~ 1, type="kaplan-meier", data = train2)
plot(simpKM, main="Kaplan Meier Plot", xlab="t", ylab="Survival")
highDimKM <- survfit(Surv(time, status) ~ 1, type="kaplan-meier", data = train2)
# ** High-dimensional Data - train2 **
highDimKM <- survfit(Surv(time, status) ~ 1, type="kaplan-meier", data = train2)
plot(highDimKM, main="Kaplan Meier Plot", xlab="t", ylab="Survival")
instal.packages("penalized")
#install.packages("penalized")
install.packages("penalized")
require("penalized")
vignette("penalized")
vignette("pec")
penalized(Surv(time, status) ~ ., data = train2, lamda1=1)
?penalized
penalized(Surv(time, status) ~ ., data = train2, lamda1=1, model ="cox")
penalized(Surv(time, status) ~ ., data = train2, lambda1=1, model ="cox")
set.seed(248)
penalized(Surv(time, status) ~ ., data = train2, lambda1=1, model ="cox")
penalized(Surv(time, status) ~ ., data = train2, lambda1=1, model ="cox")
penalized(Surv(time, status) ~ ., data = train2, lambda1=2, model ="cox")
penalized(Surv(time, status) ~ ., data = train2, lambda2=1, model ="cox")
?penfit
?penalized
penalized(Surv(time, status), penalized = train2[,1:300], lambda1=1, model ="cox")
?pec
predictionError = pec(object = coxPHModel,
formula = Surv(time, status) ~ 1, data = train1,
splitMethod = "BootCv", B = 10)
plot(predictionError)
summary(predictionError)
predictionError = pec(object = coxPHModel,
formula = Surv(time, status) ~ 1, data = train1)#,
plot(predictionError)
?pec
predictionError = pec(object = coxPHModel,
formula = Surv(time, status) ~ 1, data = train1,
splitMethod = "BootCv", B = 10)
plot(predictionError)
?penalized
penalized(Surv(time, status), ~.-X1, ~X1, data=train2, lambda1=1, model="cox")
View(train2)
penalized(Surv(time, status), train2[,2:300], ~X1, data=train2, lambda1=1, model="cox")
penalized(Surv(time, status), train2[,2:300], train2[,1], data=train2, lambda1=1, model="cox")
head(nki70)
data(nki70)
View(nki70)
penalized(Surv(time, status), ~.-X1, data=train2, lambda1=1, model="cox")
penalized(Surv(time, status), ~.-X1-time-status, ~X1, data=train2, lambda1=1, model="cox")
penalized(Surv(time, status), train2[,2:300], train2[,1], data=train2, lambda1=1, model="cox")
exLasso = penalized(Surv(time, status), train2[,2:300], train2[,1], data=train2, lambda1=1, model="cox")
coefficients(exLasso)
coefficients(exLasso, "nonzero")
coefficients(exLasso, "all")
coefficients(exLasso, "unpenalized")
coefficients(exLasso, "penalized")
coefficients(exLasso, "unpenalized")
?cv1
?cvi
?cvl
?optL1
penalized(Surv(time, status), train2[,2:300], train2[,1], data=train2, lambda1=1, model="cox")
cv1(Surv(time, status), train2[,2:300], train2[,1], data=train2, lambda1=1, model="cox")
cvl(Surv(time, status), train2[,2:300], train2[,1], data=train2, lambda1=1, model="cox")
cvl(Surv(time, status), train2[,2:300], train2[,1], data=train2, lambda2=0, model="cox", approximate=T)
optL1(Surv(time, status), train2[,2:300], train2[,1], data=train2, lambda2=0, model="cox", approximate=T)
optL1(Surv(time, status), train2[,2:300], train2[,1], data=train2, model="cox")
lassoFit = optL1(Surv(time, status), train2[,2:300], train2[,1], data=train2, model="cox")
lassoFit$lambda
lassoFit$fullfit
coefficients(lassoFit$fullfit)
coefficients(lassoFit$fullfit), "unpenalized")
coefficients(lassoFit$fullfit, "unpenalized")
penalized(Surv(time, status), ~.-X1-X2-time-status, ~X1, data=train2, lambda1=1, model="cox")
penalized(Surv(time, status), train2[,3:300], train2[,1], data=train2, lambda1=1, model="cox")
penalized(Surv(time, status), ~.-X1-X2-time-status, ~X1+X2, data=train2, lambda1=1, model="cox")
penalized(Surv(time, status), train2[,3:300], train2[,1:2], data=train2, lambda1=1, model="cox")
lassoFit = optL1(Surv(time, status), train2[,3:300], train2[,1:2], data=train2, model="cox")
lassoFit$lambda
# Print lambda
fit2 <- profL1(Surv(time,event), train2[,3:300], train2[,1:2], data=train2, model="cox")
plot(fit2$lambda, fit2$cvl, type="l", log="x")
fit2 <- profL1(Surv(time, status), train2[,3:300], train2[,1:2], data=train2, model="cox")
plot(fit2$lambda, fit2$cvl, type="l", log="x")
lassoProfile = profL1(Surv(time, status), train2[,3:300], train2[,1:2], data=train2, model="cox", fold=10)
plot(fit2$lambda, fit2$cvl, type="l", log="x")
plot(lassoProfile$lambda, lassoProfile$cvl, type="l", log="x")
lassoFit$lambda
?profL1
plotpath(fit2$fullfit, log="x")
plotpath(lassoProfile$fullfit, log="x")
plotpath(lassoProfile$fullfit, log="x")
plot(lassoProfile$lambda, lassoProfile$cvl, type="l", log="x")
pec(object = lassoFit, formula = Surv(time, status) ~ 1, data = train1,
splitMethod = "BootCv", B = 10)
pec(object = lassoFit$fullfit, formula = Surv(time, status) ~ 1, data = train1, splitMethod = "BootCv", B = 10)
?pec
coefficients(lassoFit$fullfit)
# Use cross-validation to choose lambda
lassoFit = optL1(Surv(time, status), train2[,3:300], train2[,1:2], data=train2, model="cox")
# Print lambda
lassoFit$lambda
# Print Coefficients
coefficients(lassoFit$fullfit)
exLasso = penalized(Surv(time, status), train2[,3:300], train2[,1:2], data=train2, lambda1=18, model="cox")
# See Coefficients
coefficients(exLasso, "nonzero")
exLasso = penalized(Surv(time, status), train2[,3:300], train2[,1:2], data=train2, lambda1=1, model="cox")
coxph(Surv(time, status) ~ ., data = train1)
coefficients(lassoFit$fullfit)
methods(predictSurvProb)
simpKM <- survfit(Surv(time, status) ~ 1, type="kaplan-meier", data = train1)
plot(simpKM, main="Kaplan Meier Plot", xlab="t", ylab="Survival")
coxPHModel = coxph(Surv(time, status) ~ ., data = train1)
coxph(Surv(time, status) ~ ., data = train1)
predictionError = pec(object = coxPHModel,
formula = Surv(time, status) ~ 1, data = train1,
splitMethod = "BootCv", B = 10)
plot(predictionError)
highDimKM <- survfit(Surv(time, status) ~ 1, type="kaplan-meier", data = train2)
plot(highDimKM, main="Kaplan Meier Plot", xlab="t", ylab="Survival")
?penalized
highDimKM <- survfit(Surv(time, status) ~ 1, type="kaplan-meier", data = train2)
plot(highDimKM, main="Kaplan Meier Plot", xlab="t", ylab="Survival")
exLasso = penalized(Surv(time, status), train2[,3:300], train2[,1:2], data=train2, lambda1=1, model="cox")
# See Coefficients
coefficients(exLasso, "nonzero")
coefficients(exLasso, "all")
coefficients(exLasso, "unpenalized")
lassoFit = optL1(Surv(time, status), train2[,3:300], train2[,1:2], data=train2, model="cox")
# Print lambda
lassoFit$lambda
# Print Coefficients
coefficients(lassoFit$fullfit)
coefficients(lassoFit$fullfit)
lassoProfile = profL1(Surv(time, status), train2[,3:300], train2[,1:2], data=train2, model="cox")
plot(lassoProfile$lambda, lassoProfile$cvl, type="l", log="x")
lassoProfile = profL1(Surv(time, status), train2[,3:300], train2[,1:2], data=train2, model="cox", fold=10)
plot(lassoProfile$lambda, lassoProfile$cvl, type="l", log="x")
lassoFit$lambda
plotpath(lassoProfile$fullfit, log="x")
packages.install("mstate")
install.packages("mstate")
require("mstate")
data(ebmt3)
View(ebmt3)
?ebmt3
table(ebmt3$dissub)
n <- nrow(ebmt3)
n
round(100 * table(ebmt3$dissub)/n)
table(ebmt3$age)
table(ebmt3$age)
round(100 * table(ebmt3$age)/n)
table(ebmt3$drmatch)
table(ebmt3$tcd)
round(100 * table(ebmt3$tcd)/n)
tmat <- matrix(NA, 3, 3)
matrix(NA, 3, 3)
tmat[2, 3] <- 3
dimnames(tmat) <- list(from = c("Tx", "PR", "RelDeath"), to = c("Tx", "PR", "RelDeath"))
tmat[1, 2:3] <- 1:2
tmat
transMat(x = list(c(2, 3), c(3), c()), names = c("Tx", "PR", "RelDeath"))
data(aidssi)
View(aidssi)
help("aidssi")
si <- aidssi # Just a shorter name
head(si)
table(si$status)
?msprep
tmat <- trans.comprisk(2, names = c("event-free", "AIDS", "SI"))
tmat
View(si)
si$stat1 <- as.numeric(si$status == 1)
si$stat2 <- as.numeric(si$status == 2)
?msprep
silong <- msprep(time = c(NA, "time", "time"), status = c(NA, "stat1", "stat2"), data = si, keep = "ccr5", trans = tmat)
silong <- msprep(time = c(NA, "time", "time"), status = c(NA, "stat1", "stat2"), data = si, keep = "ccr5", trans = tmat)
View(silong)
?events
events(silong)
events(silong)
silong <- expand.covs(silong, "ccr5")
silong
View(silong)
data(aidssi)
si <- aidssi # Just a shorter name
# 0 = censored, 1 = AIDS, 2 = SI appearance
head(si)
table(si$status)
# The function trans.comprisk prepares a transition matrix for competing risks models.
# The first argument is the number of causes of failure.
# The names argument is a character vector of length three (the total number of states in the multi-state model
#   including the failure-free state) may be given.
# The transition matrix has three states with state 1 being the failure-free state and the subsequent
#   states representing the different causes of failure.
tmat <- trans.comprisk(2, names = c("event-free", "AIDS", "SI"))
# print out the transistion matrix
tmat
# Add new column that treats AIDS (1) as event of interest, and all other states as censored
si$stat1 <- as.numeric(si$status == 1)
# Add new column that treats SI (2) as event of interest, and all other states as censored
si$stat2 <- as.numeric(si$status == 2)
# To prepare data in long format, use msprep. (Converts from wide format to long format)
# Wide format: one subject per line, multiple columns indicating time and status for different states
# Long format: one line for each transition for which a subject is at risk
silong <- msprep(time = c(NA, "time", "time"), status = c(NA, "stat1", "stat2"), data = si, keep = "ccr5", trans = tmat)
# events: this function counts the number of observed transitions in the multi-state model and gives their percentages
# check whether the number of events from original data (si) corresponds with long data
events(silong)
silong2 <- expand.covs(silong, "ccr5")
View(silong2)
?aidssi
c1 <- coxph(Surv(time, status) ~ 1, data = silong, subset = (trans == 1), method = "breslow")
c2 <- coxph(Surv(time, status) ~ 1, data = silong, subset = (trans == 2), method = "breslow")
h1 <- survfit(c1)
h1 <- data.frame(time = h1$time, surv = h1$surv)
h2 <- survfit(c2)
h2 <- data.frame(time = h2$time, surv = h2$surv)
c1 <- coxph(Surv(time, status) ~ 1, data = silong, subset = (trans == 1), method = "breslow")
c2 <- coxph(Surv(time, status) ~ 1, data = silong, subset = (trans == 2), method = "breslow")
h1 <- survfit(c1)
h1 <- data.frame(time = h1$time, surv = h1$surv)
h2 <- survfit(c2)
h2 <- data.frame(time = h2$time, surv = h2$surv)
idx1 <- (h1$time<13) # this restricts the plot to the first 13 years
plot(c(0,h1$time[idx1],13),c(1,h1$surv[idx1],min(h1$surv[idx1])),type="s",
xlim=c(0,13),ylim=c(0,1),xlab="Years from HIV infection",ylab="Probability",lwd=2)
idx2 <- (h2$time<13)
lines(c(0,h2$time[idx2],13),c(0,1-h2$surv[idx2],max(1-h2$surv[idx2])),type="s",lwd=2)
text(8,0.71,adj=0,"AIDS")
text(8,0.32,adj=0,"SI")
silong <- expand.covs(silong, "ccr5")
# Show that niave KM estimators are biased
c1 <- coxph(Surv(time, status) ~ 1, data = silong, subset = (trans == 1), method = "breslow")
h1 <- survfit(c1)
c2 <- coxph(Surv(time, status) ~ 1, data = silong, subset = (trans == 2), method = "breslow")
h1 <- data.frame(time = h1$time, surv = h1$surv)
h2 <- survfit(c2)
h2 <- data.frame(time = h2$time, surv = h2$surv)
idx1 <- (h1$time<13) # this restricts the plot to the first 13 years
plot(c(0,h1$time[idx1],13),c(1,h1$surv[idx1],min(h1$surv[idx1])),type="s",
xlim=c(0,13),ylim=c(0,1),xlab="Years from HIV infection",ylab="Probability",lwd=2)
idx2 <- (h2$time<13)
lines(c(0,h2$time[idx2],13),c(0,1-h2$surv[idx2],max(1-h2$surv[idx2])),type="s",lwd=2)
text(8,0.71,adj=0,"AIDS")
text(8,0.32,adj=0,"SI")
ci <- Cuminc(time = si$time, status = si$status)
ci <- Cuminc(time = "time", status = "status", data = aidssi)
idx0 <- (ci$time < 13)
ci <- Cuminc(time = si$time, status = si$status)
ci <- Cuminc(time = "time", status = "status", data = aidssi)
idx0 <- (ci$time < 13)
plot(c(0, ci$time[idx0], 13), c(1, 1 - ci$CI.1[idx0], min(1 - ci$CI.1[idx0])), type = "s",
xlim = c(0, 13), ylim = c(0, 1), xlab = "Years from HIV infection", ylab = "Probability", lwd = 2)
idx1 <- (h1$time < 13)
lines(c(0, h1$time[idx1], 13), c(1, h1$surv[idx1], min(h1$surv[idx1])), type = "s", lwd = 2, col = 8)
lines(c(0, ci$time[idx0], 13), c(0, ci$CI.2[idx0], max(ci$CI.2[idx0])), type = "s", lwd = 2)
idx2 <- (h2$time < 13)
lines(c(0, h2$time[idx2], 13), c(0, 1 - h2$surv[idx2], max(1 - h2$surv[idx2])), type = "s", lwd = 2, col = 8)
text(8, 0.77, adj = 0, "AIDS")
text(8, 0.275, adj = 0, "SI")
idx0 <- (ci$time < 13)
plot(c(0, ci$time[idx0]), c(0, ci$CI.1[idx0]), type = "s", xlim = c(0, 13), ylim = c(0, 1),
xlab = "Years from HIV infection", ylab = "Probability", lwd = 2)
lines(c(0, ci$time[idx0]), c(0, ci$CI.1[idx0] + ci$CI.2[idx0]), type = "s", lwd = 2)
text(13, 0.5 * max(ci$CI.1[idx0]), adj = 1, "AIDS")
text(13, max(ci$CI.1[idx0]) + 0.5 * max(ci$CI.2[idx0]), adj = 1, "SI")
text(13, 0.5 + 0.5 * max(ci$CI.1[idx0]) + 0.5 * max(ci$CI.2[idx0]), adj = 1, "Event-free")
ci <- Cuminc(time = si$time, status = si$status)
ci <- Cuminc(time = "time", status = "status", data = aidssi)
idx0 <- (ci$time < 13)
plot(c(0, ci$time[idx0], 13), c(1, 1 - ci$CI.1[idx0], min(1 - ci$CI.1[idx0])), type = "s",
xlim = c(0, 13), ylim = c(0, 1), xlab = "Years from HIV infection", ylab = "Probability", lwd = 2)
idx1 <- (h1$time < 13)
lines(c(0, h1$time[idx1], 13), c(1, h1$surv[idx1], min(h1$surv[idx1])), type = "s", lwd = 2, col = 8)
lines(c(0, ci$time[idx0], 13), c(0, ci$CI.2[idx0], max(ci$CI.2[idx0])), type = "s", lwd = 2)
idx2 <- (h2$time < 13)
lines(c(0, h2$time[idx2], 13), c(0, 1 - h2$surv[idx2], max(1 - h2$surv[idx2])), type = "s", lwd = 2, col = 8)
text(8, 0.77, adj = 0, "AIDS")
text(8, 0.275, adj = 0, "SI")
idx0 <- (ci$time < 13)
?aidssi
?survfit
View(h1)
?coxph
c(0,h1$time[idx1],13)
idx1
h1$surv[idx1]
c1 <- coxph(Surv(time, status) ~ 1, data = silong, subset = (trans == 1), method = "breslow")
c2 <- coxph(Surv(time, status) ~ 1, data = silong, subset = (trans == 2), method = "breslow")
h1 <- survfit(c1)
h1 <- data.frame(time = h1$time, surv = h1$surv)
h2 <- survfit(c2)
h2 <- data.frame(time = h2$time, surv = h2$surv)
idx1 <- (h1$time<13) # this restricts the plot to the first 13 years
plot(c(0, h1$time[idx1], 13), c(1, h1$surv[idx1], min(h1$surv[idx1])), type="s",
xlim=c(0,13), ylim=c(0, 1), xlab="Years from HIV infection", ylab="Probability", lwd=2)
idx2 <- (h2$time<13)
lines(c(0, h2$time[idx2], 13), c(0, 1-h2$surv[idx2], max(1-h2$surv[idx2])), type="s", lwd=2)
text(8, 0.71, adj=0, "AIDS")
text(8, 0.32, adj=0, "SI")
?Cuminc
